using EasyStat.Api.Data;
using EasyStat.Api.DTOs;
using Microsoft.EntityFrameworkCore;

namespace EasyStat.Api.Services;

public interface IStatisticsService
{
    Task<OverviewDto> GetOverviewAsync();
    Task<SubMatchThrowsDto?> GetSubMatchThrowsAsync(int subMatchId, string playerName);
    Task<TopStatsDto> GetTopStatsAsync(string? season = null);
}

public class StatisticsService : IStatisticsService
{
    private readonly EasyStatDbContext _context;

    public StatisticsService(EasyStatDbContext context)
    {
        _context = context;
    }

    public async Task<OverviewDto> GetOverviewAsync()
    {
        var totalPlayers = await _context.Players.CountAsync();
        var totalMatches = await _context.Matches.CountAsync();
        var totalSubMatches = await _context.SubMatches.CountAsync();
        var totalLegs = await _context.Legs.CountAsync();
        var totalThrows = await _context.Throws.CountAsync();

        var recentMatches = await _context.Matches
            .Include(m => m.Team1)
            .Include(m => m.Team2)
            .OrderByDescending(m => m.ScrapedAt)
            .Take(5)
            .Select(m => new RecentMatchDto
            {
                Team1 = m.Team1.Name,
                Team2 = m.Team2.Name,
                Team1Score = m.Team1Score,
                Team2Score = m.Team2Score,
                ScrapedAt = m.ScrapedAt
            })
            .ToListAsync();

        return new OverviewDto
        {
            TotalPlayers = totalPlayers,
            TotalMatches = totalMatches,
            TotalSubMatches = totalSubMatches,
            TotalLegs = totalLegs,
            TotalThrows = totalThrows,
            RecentMatches = recentMatches
        };
    }

    public async Task<SubMatchThrowsDto?> GetSubMatchThrowsAsync(int subMatchId, string playerName)
    {
        var player = await _context.Players
            .FirstOrDefaultAsync(p => p.Name == playerName);

        if (player == null)
            return null;

        var subMatch = await _context.SubMatches
            .Include(sm => sm.Match)
                .ThenInclude(m => m.Team1)
            .Include(sm => sm.Match)
                .ThenInclude(m => m.Team2)
            .Include(sm => sm.Participants)
                .ThenInclude(p => p.Player)
            .Include(sm => sm.Legs)
                .ThenInclude(l => l.Throws)
            .FirstOrDefaultAsync(sm => sm.Id == subMatchId);

        if (subMatch == null)
            return null;

        var participation = subMatch.Participants.FirstOrDefault(p => p.PlayerId == player.Id);
        if (participation == null)
            return null;

        var opposingTeamNumber = participation.TeamNumber == 1 ? 2 : 1;
        var opponents = subMatch.Participants
            .Where(p => p.TeamNumber == opposingTeamNumber)
            .Select(p => p.Player.Name)
            .ToList();

        var opponentNames = opponents.Count > 1 
            ? string.Join(" + ", opponents) 
            : opponents.FirstOrDefault() ?? "Unknown";

        var legs = subMatch.Legs.Select(leg => new LegWithThrowsDto
        {
            LegNumber = leg.LegNumber,
            WinnerTeam = leg.WinnerTeam,
            LegTotalRounds = leg.TotalRounds,
            PlayerWonLeg = leg.WinnerTeam == participation.TeamNumber,
            PlayerThrows = leg.Throws
                .Where(t => t.TeamNumber == participation.TeamNumber)
                .Select(t => new ThrowInLegDto
                {
                    RoundNumber = t.RoundNumber,
                    Score = t.Score,
                    RemainingScore = t.RemainingScore,
                    DartsUsed = t.DartsUsed,
                    LegNumber = leg.LegNumber
                })
                .OrderBy(t => t.RoundNumber)
                .ToList(),
            OpponentThrows = leg.Throws
                .Where(t => t.TeamNumber == opposingTeamNumber)
                .Select(t => new ThrowInLegDto
                {
                    RoundNumber = t.RoundNumber,
                    Score = t.Score,
                    RemainingScore = t.RemainingScore,
                    DartsUsed = t.DartsUsed,
                    LegNumber = leg.LegNumber
                })
                .OrderBy(t => t.RoundNumber)
                .ToList()
        }).ToList();

        var playerThrows = legs.SelectMany(l => l.PlayerThrows).ToList();
        var opponentThrows = legs.SelectMany(l => l.OpponentThrows).ToList();

        var playerStats = CalculatePlayerStatsInMatch(playerThrows, participation.TeamNumber, legs, participation.PlayerAvg);
        var opponentAvg = subMatch.Participants
            .Where(p => p.TeamNumber == opposingTeamNumber)
            .Average(p => p.PlayerAvg ?? 0);
        var opponentStats = CalculatePlayerStatsInMatch(opponentThrows, opposingTeamNumber, legs, opponentAvg);

        return new SubMatchThrowsDto
        {
            SubMatchInfo = new SubMatchInfoDto
            {
                Id = subMatch.Id,
                MatchType = subMatch.MatchType,
                MatchName = subMatch.MatchName ?? "",
                Team1Legs = subMatch.Team1Legs,
                Team2Legs = subMatch.Team2Legs,
                PlayerAvg = participation.PlayerAvg,
                MatchDate = subMatch.Match.MatchDate,
                Team1Name = subMatch.Match.Team1.Name,
                Team2Name = subMatch.Match.Team2.Name,
                TeamNumber = participation.TeamNumber
            },
            PlayerName = playerName,
            OpponentNames = opponentNames,
            Legs = legs,
            PlayerStatistics = playerStats,
            OpponentStatistics = opponentStats
        };
    }

    private PlayerStatsInMatchDto CalculatePlayerStatsInMatch(
        List<ThrowInLegDto> throws, 
        int teamNumber, 
        List<LegWithThrowsDto> legs,
        decimal? avgFromDb)
    {
        var scores = throws.Where(t => t.Score >= 0).Select(t => t.Score).ToList();
        var totalScore = scores.Sum();
        var totalThrows = throws.Count;

        var legsWon = legs.Count(l => l.WinnerTeam == teamNumber);

        return new PlayerStatsInMatchDto
        {
            TotalThrows = totalThrows,
            TotalScore = totalScore,
            AverageScore = avgFromDb ?? 0,
            MaxScore = scores.Any() ? scores.Max() : 0,
            LegsWon = legsWon,
            LegsTotal = legs.Count,
            Throws100_139 = scores.Count(s => s >= 100 && s < 140),
            Throws140_179 = scores.Count(s => s >= 140 && s < 180),
            Throws180 = scores.Count(s => s == 180),
            Throws100PlusTotal = scores.Count(s => s >= 100),
            ThrowsUnder20 = scores.Count(s => s < 20),
            Throws60Plus = scores.Count(s => s >= 60),
            TotalCheckouts = throws.Count(t => t.RemainingScore == 0),
            CheckoutDarts = 0, // Calculate if needed
            ShortLegs = 0, // Calculate if needed
            HighFinishes = 0, // Calculate if needed
            First9DartAvg = 0 // Calculate if needed
        };
    }

    public async Task<TopStatsDto> GetTopStatsAsync(string? season = null)
    {
        // Top 10 Averages (Singles only)
        var topAveragesQuery = _context.SubMatchParticipants
            .Include(smp => smp.Player)
            .Include(smp => smp.SubMatch)
                .ThenInclude(sm => sm.Match)
                    .ThenInclude(m => m.Team1)
            .Include(smp => smp.SubMatch)
                .ThenInclude(sm => sm.Match)
                    .ThenInclude(m => m.Team2)
            .Where(smp => smp.SubMatch.MatchType == "Singles" && smp.PlayerAvg.HasValue && smp.PlayerAvg.Value > 0);

        if (!string.IsNullOrEmpty(season))
        {
            topAveragesQuery = topAveragesQuery.Where(smp => smp.SubMatch.Match.Season == season);
        }

        var topAverages = await topAveragesQuery
            .OrderByDescending(smp => smp.PlayerAvg)
            .Take(10)
            .Select(smp => new TopAverageDto
            {
                PlayerName = smp.Player.Name,
                Average = smp.PlayerAvg!.Value,
                TeamName = smp.TeamNumber == 1 ? smp.SubMatch.Match.Team1.Name : smp.SubMatch.Match.Team2.Name,
                OpponentName = smp.TeamNumber == 1 ? smp.SubMatch.Match.Team2.Name : smp.SubMatch.Match.Team1.Name,
                MatchDate = smp.SubMatch.Match.MatchDate,
                SubMatchId = smp.SubMatch.Id
            })
            .ToListAsync();

        // Top 10 Checkouts
        var topCheckoutsQuery = from t in _context.Throws
                               join l in _context.Legs on t.LegId equals l.Id
                               join sm in _context.SubMatches on l.SubMatchId equals sm.Id
                               join m in _context.Matches on sm.MatchId equals m.Id
                               join t1 in _context.Teams on m.Team1Id equals t1.Id
                               join t2 in _context.Teams on m.Team2Id equals t2.Id
                               join smp in _context.SubMatchParticipants on new { sm.Id, t.TeamNumber } equals new { smp.SubMatch.Id, smp.TeamNumber }
                               join p in _context.Players on smp.PlayerId equals p.Id
                               where t.RemainingScore == 0
                                     && t.Score > 0
                                     && sm.MatchType == "Singles"
                                     && t.TeamNumber == l.WinnerTeam
                               select new { Throw = t, Leg = l, SubMatch = sm, Match = m, Team1 = t1, Team2 = t2, Player = p, Participant = smp };

        if (!string.IsNullOrEmpty(season))
        {
            topCheckoutsQuery = topCheckoutsQuery.Where(x => x.Match.Season == season);
        }

        var topCheckouts = await topCheckoutsQuery
            .OrderByDescending(x => x.Throw.Score)
            .ThenByDescending(x => x.Match.MatchDate)
            .Take(10)
            .Select(x => new TopCheckoutDto
            {
                PlayerName = x.Player.Name,
                Checkout = x.Throw.Score,
                TeamName = x.Participant.TeamNumber == 1 ? x.Team1.Name : x.Team2.Name,
                OpponentName = x.Participant.TeamNumber == 1 ? x.Team2.Name : x.Team1.Name,
                MatchDate = x.Match.MatchDate,
                SubMatchId = x.SubMatch.Id
            })
            .ToListAsync();

        // Top 10 Shortest Legs (fewest darts)
        var shortestLegsQuery = from l in _context.Legs
                               join sm in _context.SubMatches on l.SubMatchId equals sm.Id
                               join m in _context.Matches on sm.MatchId equals m.Id
                               join t1 in _context.Teams on m.Team1Id equals t1.Id
                               join t2 in _context.Teams on m.Team2Id equals t2.Id
                               join smp in _context.SubMatchParticipants on new { sm.Id, l.WinnerTeam } equals new { smp.SubMatch.Id, WinnerTeam = smp.TeamNumber }
                               join p in _context.Players on smp.PlayerId equals p.Id
                               where sm.MatchType == "Singles"
                               let totalDarts = _context.Throws
                                   .Where(t => t.LegId == l.Id && t.TeamNumber == l.WinnerTeam && !(t.Score == 0 && t.RemainingScore == 501))
                                   .Sum(t => t.DartsUsed > 0 ? t.DartsUsed : 3)
                               where totalDarts > 0
                               select new { Leg = l, SubMatch = sm, Match = m, Team1 = t1, Team2 = t2, Player = p, Participant = smp, TotalDarts = totalDarts };

        if (!string.IsNullOrEmpty(season))
        {
            shortestLegsQuery = shortestLegsQuery.Where(x => x.Match.Season == season);
        }

        var shortestLegs = await shortestLegsQuery
            .OrderBy(x => x.TotalDarts)
            .ThenByDescending(x => x.Match.MatchDate)
            .Take(10)
            .Select(x => new ShortestLegDto
            {
                PlayerName = x.Player.Name,
                Darts = x.TotalDarts,
                TeamName = x.Participant.TeamNumber == 1 ? x.Team1.Name : x.Team2.Name,
                OpponentName = x.Participant.TeamNumber == 1 ? x.Team2.Name : x.Team1.Name,
                MatchDate = x.Match.MatchDate,
                SubMatchId = x.SubMatch.Id
            })
            .ToListAsync();

        // Top 10 Most 180s in a match
        var most180sQuery = from sm in _context.SubMatches
                           join m in _context.Matches on sm.MatchId equals m.Id
                           join t1 in _context.Teams on m.Team1Id equals t1.Id
                           join t2 in _context.Teams on m.Team2Id equals t2.Id
                           join smp in _context.SubMatchParticipants on sm.Id equals smp.SubMatchId
                           join p in _context.Players on smp.PlayerId equals p.Id
                           where sm.MatchType == "Singles"
                           let count180 = _context.Throws
                               .Count(t => t.Leg.SubMatchId == sm.Id && t.TeamNumber == smp.TeamNumber && t.Score == 180)
                           where count180 > 0
                           select new { SubMatch = sm, Match = m, Team1 = t1, Team2 = t2, Player = p, Participant = smp, Count180 = count180 };

        if (!string.IsNullOrEmpty(season))
        {
            most180sQuery = most180sQuery.Where(x => x.Match.Season == season);
        }

        var most180s = await most180sQuery
            .OrderByDescending(x => x.Count180)
            .ThenByDescending(x => x.Match.MatchDate)
            .Take(10)
            .Select(x => new Most180sDto
            {
                PlayerName = x.Player.Name,
                Count180 = x.Count180,
                TeamName = x.Participant.TeamNumber == 1 ? x.Team1.Name : x.Team2.Name,
                OpponentName = x.Participant.TeamNumber == 1 ? x.Team2.Name : x.Team1.Name,
                MatchDate = x.Match.MatchDate,
                SubMatchId = x.SubMatch.Id
            })
            .ToListAsync();

        return new TopStatsDto
        {
            TopAverages = topAverages,
            TopCheckouts = topCheckouts,
            ShortestLegs = shortestLegs,
            Most180s = most180s
        };
    }
}